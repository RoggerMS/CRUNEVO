// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(uuid()) @db.Uuid
  email        String @unique
  username     String @unique
  displayName  String @map("display_name")
  avatarUrl    String? @map("avatar_url")
  isVerified   Boolean @default(false) @map("is_verified")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follow[] @relation("UserFollowers")
  following    Follow[] @relation("UserFollowing")

  @@map("users")
}

model Post {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  content       String
  mediaUrls     Json     @default("[]") @map("media_urls") @db.JsonB
  likesCount    Int      @default(0) @map("likes_count")
  commentsCount Int      @default(0) @map("comments_count")
  sharesCount   Int      @default(0) @map("shares_count")
  isPublic      Boolean  @default(true) @map("is_public")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@index([isPublic])
  @@map("posts")
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid
  postId     String   @map("post_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  parentId   String?  @map("parent_id") @db.Uuid
  content    String
  likesCount Int      @default(0) @map("likes_count")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")
  likes    Like[]

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  postId    String?  @map("post_id") @db.Uuid
  commentId String?  @map("comment_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "unique_user_post_like")
  @@unique([userId, commentId], name: "unique_user_comment_like")
  @@map("likes")
}

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], name: "unique_follow")
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}